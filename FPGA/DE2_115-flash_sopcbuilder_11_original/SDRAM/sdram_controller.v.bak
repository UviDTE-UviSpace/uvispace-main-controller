///
/// SDRAM controller
/// ================
///
/// This module store temporal image data in memory SDRAM, throught "Multi-Port
/// SDRAM Controller", that go over memory position to position, storing image
/// data in two memory banks, defines throught to the corresponding parameters.
///
/// .. figure:: sdram_controller.png
///    
///    SDRAM controller block
///
/// The data are store in two banks of memory, so DATA1 with 16-bit bus width 
/// consists on 5-bit for green color and 10-bit for blue color, and DATA2 
/// with 16-bit bus width consists on 5-bit for green color and 10-bit for red 
/// color.
///
/// iReadClock is connected to clock signal fo the module that reads frames 
/// from SDRAM. Each time a pixel needs to be read from SDRAM, iRead is set 
/// high to request pixel reading, and when request is carried out.
/// 
/// ..Note::Load is set high the pixel´s memory position is cleared.
/// 
/// WR1_CLK and WR2_CLK are connected to RAW2RGB module’s clock to have data 
/// synchronized. When a pixel from RAW2RGB module is ready, WR1 and WR2 are 
/// set high to request data writing. WR1_ADDR, WR2_ADDR, RD1_ADDR, and 
/// RD2_ADDR read start addresses; WR1_MAX_ADDR, WR2_MAX_ADDR, RD1_MAX_ADDR, 
/// and RD2_MAX_ADDR read end addresses for reading or writing.
/// 
/// RD1_DATA and RD2_DATA are connected to the Avalon bus using an Avalon 
/// Memory-Mapped slave interface.
///   
module sdram_controller (
        // Clock Input
        input clock,
        input reset_n,
        // Image size input
        input [15:0] width,
        input [15:0] height,
        input [22:0] size,
        // Image data input
        input iWrite,
        input iWriteClock,
        input [11:0] iRed,
        input [11:0] iGreen,
        input [11:0] iBlue,
        // Image data output
        input iRead,
        input iReadClock,
        output [9:0] oRed,
        output [9:0] oGreen,
        output [9:0] oBlue,
        // SDRAM Interface
        inout [15:0] DRAM_DQ, // SDRAM Data bus 16 Bits
        output [11:0] DRAM_ADDR, // SDRAM Address bus 12 Bits
        output DRAM_LDQM, // SDRAM Low-byte Data Mask 
        output DRAM_UDQM, // SDRAM High-byte Data Mask
        output DRAM_WE_N, // SDRAM Write Enable
        output DRAM_CAS_N, // SDRAM Column Address Strobe
        output DRAM_RAS_N, // SDRAM Row Address Strobe
        output DRAM_CS_N, // SDRAM Chip Select
        output DRAM_BA_0, // SDRAM Bank Address 0
        output DRAM_BA_1, // SDRAM Bank Address 0
        output DRAM_CLK, // SDRAM Clock
        output DRAM_CKE // SDRAM Clock Enable
    );
   
    // Image size input
    reg [22:0] addr1; // Base address bank 1
    reg [22:0] addr2; // Base address bank 2
    reg [22:0] max_addr1; // Max address bank 1
    reg [22:0] max_addr2; // Max address bank 2
    
    always @(posedge clock)
    begin
        addr1 = 0;//0;
        addr2 = size;//width * height;
        max_addr1 = size;//width * height;
        max_addr2 = 2 * size;//2 * width * height;
    end
   
    // Image data input
    wire Write;
    wire Write_CLK;
    wire [15:0] Write_DATA1;
    wire [15:0] Write_DATA2;
    
    assign Write = iWrite;
    assign Write_CLK = iWriteClock;
    assign Write_DATA1 = {1'b0, iGreen[11:7], iBlue[11:2]};
    assign Write_DATA2 = {1'b0, iGreen[6:2], iRed[11:2]};
   
    // Image data output
    wire Read;
    wire Read_CLK;
    wire [15:0] Read_DATA1;
    wire [15:0] Read_DATA2;

    assign Read = iRead;
    assign Read_CLK = iReadClock;
    assign oRed = Read_DATA2[9:0];
    assign oGreen = {Read_DATA1[14:10], Read_DATA2[14:10]};
    assign oBlue = Read_DATA1[9:0];
   
    // Clock signals
    wire sdram_ctrl_clk;
    sdram_pll u6 (
        .inclk0(clock),
        .c0(sdram_ctrl_clk),
        .c1(DRAM_CLK)
    );
    
    sdram_control (
        .REF_CLK(clock),
        .RESET_N(1'b1),
        // SDRAM control clock
        .CLK(sdram_ctrl_clk),
        // Load configuration
        .LOAD(!reset_n),
        // Input address
        .ADDR1(addr1),
        .ADDR2(addr2),
        .MAX_ADDR1(max_addr1),
        .MAX_ADDR2(max_addr2),
        // FIFO write
        .write(Write),
        .write_clk(Write_CLK),
        .WR1_DATA(Write_DATA1), // Bank 1
        .WR2_DATA(Write_DATA2), // Bank 2
        // FIFO read
        .read(Read),
        .read_clk(Read_CLK),
        .RD1_DATA(Read_DATA1), // Bank 1
        .RD2_DATA(Read_DATA2), // Bank 2
        // SDRAM Side
        .SA(DRAM_ADDR),
        .BA({DRAM_BA_1, DRAM_BA_0}),
        .CS_N(DRAM_CS_N),
        .CKE(DRAM_CKE),
        .RAS_N(DRAM_RAS_N),
        .CAS_N(DRAM_CAS_N),
        .WE_N(DRAM_WE_N),
        .DQ(DRAM_DQ),
        .DQM({DRAM_UDQM, DRAM_LDQM})
    );
   
endmodule