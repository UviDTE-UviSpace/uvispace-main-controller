#!/usr/bin/env python
"""
Package intended communicate with UGVs and calculate paths
"""
# ROS libraries
import rospy
from geometry_msgs.msg import Twist, Pose2D


class RobotController(object):
    """
    This class contains the methods needed to control a robot's behavior 
    """
    def __init__(self, robot_id=1, port=None, baudrate=57600):
        self.robot_id = robot_id
        self.port = port
        self.baudrate = baudrate
        self.init = False
        self.serial = None
        self.comm_is_ready = False   
        
    def stablish_communication(self):    
        """
        Stablish a new communication through serial port

        Returns
        -------
        comm_is_ready : boolean
            returns a true or false condition which confirms that 
            the communication was correctly stablished.
        """    
        self.serial = SerMesProtocol(port=self.port, baudrate=self.baudrate)
        if self.serial.ready():
            self.comm_is_ready = True
        else:
            self.comm_is_ready = False       
        return self.comm_is_ready

    def disconnect(self):
    
    def subscribe_to_navigation_topic(self):
        """ Subscribes the node to a pose topic """
        rospy.Subscriber('/robot_{}/pose2d'.format(self.robot_id), Pose2D, 
					     self.new_pose, queue_size=1)
    
    def subscribe_to_control_topic(self):
        """ Subscribes the node to a goal topic """  
 		rospy.Subscriber('/robot_{}/goal'.format(self.robot_id), Pose2D, 
					     self.new_goal, queue_size=1)   
					     
					     
    def move_command(self):
    
    
    
